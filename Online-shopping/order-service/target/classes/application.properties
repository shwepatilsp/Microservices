spring.datasource.url=jdbc:mysql://localhost:3306/Order_Service
spring.datasource.username=root
spring.datasource.password=rootroot
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

server.port=8081

eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka

spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#resilience4j properties
# to see different state of circuit breaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# how much buffer size it will take for event
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

# algorithm used is slidingWindowType
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# only 5 back to back request are failing then only it will change state from closed to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# if 50% of calls are failing then only it will change state from closed to open
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# how much time we can wait in open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# how many calls we have to allow in half open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# set automatic transition from open to half open
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#timeout properties to throw timeout exception
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#distributed tracing
management.tracing.sampling.probability=1.0

#kafka properties
spring.kafka.bootstrap-servers=localhost:9092

#to always send messages for particular topic
spring.kafka.template.default-topic=notificationTopic

# how to serialize key and value pair while sending to kafka broker
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# to send order placed event as json / to convert java object to json
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#provide fully qualified name for mapping order service with notification service
spring.kafka.producer.properties.spring.json.type.mapping = event:com.onlineshopping.orderservice.event.OrderPlacedEvent


spring.kafka.producer.properties.spring.json.trusted.packages=com.onlineshopping.orderservice.event

spring.kafka.producer.properties.spring.json.trusted.all=true


